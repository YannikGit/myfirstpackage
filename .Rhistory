devtools::load_all(path = "C:\Users\Besitzer\Documents\myfirstpackage")
devtools::load_all(path = "C/Users/Besitzer/Documents/myfirstpackage")
devtools::load_all(path = "C/Users/Besitzer/Documents/myfirstpackage")
devtools::load_all(path = "C/Users/Besitzer/Documents/myfirstpackage")
rlang::last_trace()
devtools::load_all(path = "C/Users/Besitzer/Documents/myfirstpackage")
library("cito")
library(cito)
set.seed(123)
library(cito)
rep = 50
out = rep(NA, rep)
for(i in 1:rep){
validation_set<- sample(c(1:nrow(datasets::iris)),25)
# Build and train  Network
nn.fit<- dnn(Sepal.Length~., data = datasets::iris[-validation_set,],
epochs = 1, lr = 0.000000000000001, hidden = c(500,500,500, 500, 500, 500, 500),
plot = F)
# Sturcture of Neural Network
out[i] = mean(predict(nn.fit))
}
hist(out)
install.packages(MASS)
install.packages("MASS"")
stop
install.packages("MASS")
install.packages(MASS)
library(MASS)
library(MASS)
set.seed(123)
set.seed(123)
correlation <- 0.6
n <- 100
mean <- c(0, 0)
sigma <- matrix(c(1, correlation, correlation, 1), ncol = 2)
data <- mvrnorm(n, mu = mean, Sigma = sigma)
print(data)
plot(data)
# Check the correlation between x and y
correlation <- cor(x, y)
x <- data[, 1]
y <- data[, 2]
real_correlation <- cor(x, y)
print(real_correlation)
correlation <- 0.6
n <- 100
mean <- c(0, 0)
sigma <- matrix(c(1, correlation, correlation, 1), ncol = 2)
data <- mvrnorm(n, mu = mean, Sigma = sigma)
print(data)
plot(data)
x <- data[, 1]
y <- data[, 2]
real_correlation <- cor(x, y)
print(real_correlation)
validation_set<- data
View(data)
# Build and train  Network
nn.fit<- dnn(V1~., data = data,
epochs = 1, lr = 0.000000000000001, hidden = c(500,500,500, 500, 500, 500, 500),
plot = F)
set.seed(123)
library(cito)
rep = 50
out = rep(NA, rep)
for(i in 1:rep){
validation_set<- data
# Build and train  Network
nn.fit<- dnn(V1~., data = data,
epochs = 1, lr = 0.000000000000001, hidden = c(500,500,500, 500, 500, 500, 500),
plot = F)
# Sturcture of Neural Network
out[i] = mean(predict(nn.fit))
}
colnames(data) <- x, y
colnames(data) <- x
colnames(data)
colnames(data[,1]) <- x
is.dataframe(data)
is.data.frame(data)
class(data)
as.data.frame(data)
data <- as.data.frame(data)
class(data)
data <- mvrnorm(n, mu = mean, Sigma = sigma)
colnames(data) <- c("x", "y")
print(data)
# Build and train  Network
nn.fit<- dnn(x~., data = data,
epochs = 1, lr = 0.000000000000001, hidden = c(500,500,500, 500, 500, 500, 500),
plot = F)
for(i in 1:rep){
validation_set<- data
# Build and train  Network
nn.fit<- dnn(x~., data = data,
epochs = 1, lr = 0.000000000000001, hidden = c(500,500,500, 500, 500, 500, 500),
plot = F)
# Sturcture of Neural Network
out[i] = mean(predict(nn.fit))
}
hist(out)
lm(x ~ y, data = data)
data <- as.data.frame(data)
lm(x ~ y, data = data)
X = matrix(runif(100*50, -1, 1), 100, 50)
Y = rnorm(100)
nn.fit<- dnn(Y~., data = data.frame(Y = Y, X),
epochs = 1, lr = 0.000000000000001, hidden = c(500,500,500, 500, 500, 500, 500),
plot = F)
eff = diag(marginalEffects(nn.fit, interactions = FALSE)$mean)
print(eff)
X = matrix(runif(100*50, -1, 1), 100, 50)
Y = rnorm(100)
nn.fit<- dnn(Y~., data = data.frame(Y = Y, X),
epochs = 1, lr = 0.000000000000001, hidden = c(500,500,500, 500, 500, 500, 500),
plot = F)
library(cito)
X = matrix(runif(100*50, -1, 1), 100, 50)
Y = rnorm(100)
nn.fit<- dnn(Y~., data = data.frame(Y = Y, X),
epochs = 1, lr = 0.000000000000001, hidden = c(500,500,500, 500, 500, 500, 500),
plot = F)
eff = diag(marginalEffects(nn.fit, interactions = FALSE)$mean)
library(margins)
g
eff = diag(marginalEffects(nn.fit, interactions = FALSE)$mean)
library(margins)
eff = diag(marginalEffects(nn.fit, interactions = FALSE)$mean)
library(marginalEffects)
install.packages("marginalEffects")
install.packages("marginaleffects")
library(marginaleffects)
eff = diag(marginalEffects(nn.fit, interactions = FALSE)$mean)
eff = diag(marginaleffects(nn.fit, interactions = FALSE)$mean)
set.seed(123
set.seed(123)
set.seed(123)
library(cito)
rep = 50
out = rep(NA, rep)
library(MASS)
set.seed(123)
correlation <- 0.6
n <- 100
mean <- c(0, 0)
sigma <- matrix(c(1, correlation, correlation, 1), ncol = 2)
data <- mvrnorm(n, mu = mean, Sigma = sigma)
print(data)
plot(data)
colnames(data) <- c("x", "y")
data <- as.data.frame(data)
x <- data[, 1]
y <- data[, 2]
real_correlation <- cor(x, y)
print(real_correlation)
for(i in 1:rep){
validation_set<- data
# Build and train  Network
nn.fit<- dnn(x~., data = data,
epochs = 1, lr = 0.000000000000001, hidden = c(500,500,500, 500, 500, 500, 500),
plot = F)
# Sturcture of Neural Network
out[i] = mean(predict(nn.fit))
}
hist(out)
lm(x ~ y, data = data)
eff <- diag(marginalEffects(nn.fit, interactions = FALSE)$mean)
print(eff)
source(AME.R)
source("AME.R")
source("DataGenerator.R")
set.seed(123)
source("AME.R")
source("DataGenerator.R")
source("C:/Users/Besitzer/Documents/myfirstpackage/R/DataGenerator.R")
source("C:/Users/Besitzer/Documents/myfirstpackage/R/AME.R")
source("C:/Users/Besitzer/Documents/myfirstpackage/R/DataGenerator.R")
library(cito)
rep = 50
out = rep(NA, rep)
for(i in 1:rep){
validation_set<- data
# Build and train  Network
nn.fit<- dnn(x~., data = data,
epochs = 1, lr = 0.000000000000001, hidden = c(500,500,500, 500, 500, 500, 500),
plot = F)
# Sturcture of Neural Network
out[i] = mean(predict(nn.fit))
}
eff <- diag(marginalEffects(nn.fit, interactions = FALSE)$mean)
correlation <- 0.6
library(MASS)
library(MASS)
set.seed(123)
correlation <- 0.6
n <- 100
mean <- c(2, 2)
sigma <- matrix(c(1, correlation, correlation, 1), ncol = 2)
data <- mvrnorm(n, mu = mean, Sigma = sigma)
print(data)
library(MASS)
set.seed(123)
correlation <- 0.6
n <- 100
mean <- c(10, 10)
sigma <- matrix(c(1, correlation, correlation, 1), ncol = 2)
data <- mvrnorm(n, mu = mean, Sigma = sigma)
print(data)
library(MASS)
set.seed(123)
correlation <- 0.6
n <- 100
mean <- c(0, 0)
sigma <- matrix(c(1, correlation, correlation, 1), ncol = 2)
# Generate correlated data between 0 and 1
data <- matrix(0, n, 2)
for (i in 1:n) {
temp_data <- mvrnorm(1, mu = mean, Sigma = sigma)
temp_data <- pnorm(temp_data) # Apply cumulative distribution function to get values between 0 and 1
data[i,] <- temp_data
}
colnames(data) <- c("x", "y")
data <- as.data.frame(data)
print(data)
plot(data)
x <- data[, 1]
y <- data[, 2]
real_correlation <- cor(x, y)
print(real_correlation)
set.seed(123)
source("C:/Users/Besitzer/Documents/myfirstpackage/R/AME.R")
source("C:/Users/Besitzer/Documents/myfirstpackage/R/dataGenerator.R")
library(cito)
rep = 50
out = rep(NA, rep)
for(i in 1:rep){
validation_set<- data
# Build and train  Network
nn.fit<- dnn(x~., data = data,
epochs = 1, lr = 0.000000000000001, hidden = c(500,500,500, 500, 500, 500, 500),
plot = F)
# Sturcture of Neural Network
out[i] = mean(predict(nn.fit))
}
hist(out)
lm(x ~ y, data = data)
eff <- diag(marginalEffects(nn.fit, interactions = FALSE)$mean)
data = data.frame(Y,x)
data = data.frame(Y,X)
data = data.frame("Y","X")
View(data)
data = data.frame(Y = Y,X)
X = matrix(runif(100*50, -1, 1), 100, 50)
Y = rnorm(100)
data = data.frame(Y,X)
View(data)
rep = 50
out = rep(NA, rep)
for(i in 1:rep){
# Build and train  Network
nn.fit<- dnn(Y~., data = data,
epochs = 1, lr = 0.000000000000001, hidden = c(500,500,500, 500, 500, 500, 500),
plot = F)
# Sturcture of Neural Network
out[i] = mean(predict(nn.fit))
}
hist(out)
lm(x ~ y, data = data)
lm(X ~ Y, data = data)
eff <- diag(marginalEffects(nn.fit, interactions = FALSE)$mean)
print(eff)
lm(Y ~ X, data = data)
for(i in 1:rep){
# Build and train  Network
nn.fit<- dnn(Y~., data = data,
epochs = 1, lr = 0.000000000000001, hidden = c(500, 500, 500),
plot = F)
# Sturcture of Neural Network
out[i] = mean(predict(nn.fit))
}
rep = 51
out = rep(NA, rep)
for(i in 1:rep){
# Build and train  Network
nn.fit<- dnn(Y~., data = data,
epochs = 1, lr = 0.000000000000001, hidden = c(500, 500, 500),
plot = F)
# Sturcture of Neural Network
out[i] = mean(predict(nn.fit))
}
hist(out)
lm(Y ~ X, data = data)
eff <- diag(marginalEffects(nn.fit, interactions = FALSE)$mean)
print(eff)
lm <- lm(Y ~ X, data = data)
mean(lm)
print(lm)
summary(lm)
cor(X,Y)
source("C:/Users/Besitzer/Documents/myfirstpackage/R/AME.R")
source("C:/Users/Besitzer/Documents/myfirstpackage/R/dataGenerator.R")
lm <- lm(Y ~ X, data = data)
summary(lm)
eff <- diag(marginalEffects(nn.fit, interactions = FALSE)$mean)
print(eff)
# Build and train  Network
nn.fit<- dnn(Y~., data = data,
epochs = 1, lr = 0.000000000000001, hidden = c(),
plot = F)
for(i in 1:rep){
# Build and train  Network
nn.fit<- dnn(Y~., data = data,
epochs = 1, lr = 0.000000000000001, hidden = c(),
plot = F)
eff[i] = diag(marginalEffects(nn.fit, interactions = FALSE)$mean)
# Sturcture of Neural Network
out[i] = mean(predict(nn.fit))
}
warnings()
eff = numeric(rep)
for(i in 1:rep){
# Build and train  Network
nn.fit<- dnn(Y~., data = data,
epochs = 1, lr = 0.000000000000001, hidden = c(1),
plot = F)
eff[i] = diag(marginalEffects(nn.fit, interactions = FALSE)$mean)
# Sturcture of Neural Network
out[i] = mean(predict(nn.fit))
}
#X = matrix(runif(100*50, -1, 1), 100, 50)
X = matrix(runif(100), 100, 50)
Y = rnorm(100)
data = data.frame(Y,X)
#X = matrix(runif(100*50, -1, 1), 100, 50)
X = matrix(runif(100), 100, 1)
Y = rnorm(100)
data = data.frame(Y,X)
cor(X,Y)
rep = 500
out = rep(NA, rep)
eff = numeric(rep)
for(i in 1:rep){
# Build and train  Network
nn.fit<- dnn(Y~., data = data,
epochs = 1, lr = 0.000000000000001, hidden = c(1),
plot = F)
eff[i] = diag(marginalEffects(nn.fit, interactions = FALSE)$mean)
# Sturcture of Neural Network
out[i] = mean(predict(nn.fit))
}
set.seed(123)
source("C:/Users/Besitzer/Documents/myfirstpackage/R/AME.R")
source("C:/Users/Besitzer/Documents/myfirstpackage/R/dataGenerator.R")
library(cito)
rep = 500
out = rep(NA, rep)
eff = numeric(rep)
for(i in 1:rep){
# Build and train  Network
nn.fit<- dnn(Y~., data = data,
epochs = 1, lr = 0.000000000000001, hidden = c(1),
plot = F)
eff[i] = diag(marginalEffects(nn.fit, interactions = FALSE)$mean)
# Sturcture of Neural Network
out[i] = mean(predict(nn.fit))
}
#X = matrix(runif(100*50, -1, 1), 100, 50)
X = matrix(runif(100, -1, 1), 100, 1)
Y = rnorm(100)
data = data.frame(Y,X)
for(i in 1:rep){
# Build and train  Network
nn.fit<- dnn(Y~., data = data,
epochs = 1, lr = 0.000000000000001, hidden = c(1),
plot = F)
eff[i] = diag(marginalEffects(nn.fit, interactions = FALSE)$mean)
# Sturcture of Neural Network
out[i] = mean(predict(nn.fit))
}
for(i in 1:rep){
# Build and train  Network
nn.fit <- dnn(Y~., data = data,
epochs = 1, lr = 0.000000000000001, hidden = c(1),
plot = F)
eff[i] = diag(marginalEffects(nn.fit, interactions = FALSE)$mean)
# Sturcture of Neural Network
out[i] = mean(predict(nn.fit))
}
for(i in 1:rep){
nn.fit <- dnn(Y~., data = data,
epochs = 1, lr = 0.000000000000001, hidden = c(500, 500, 500),
plot = F)
eff[i] = diag(marginalEffects(nn.fit, interactions = FALSE)$mean)
out[i] = mean(predict(nn.fit))
}
X = matrix(runif(100*50, -1, 1), 100, 50)
#X = matrix(runif(100, -1, 1), 100, 1)
Y = rnorm(100)
data = data.frame(Y,X)
for(i in 1:rep){
nn.fit <- dnn(Y~., data = data,
epochs = 1, lr = 0.000000000000001, hidden = c(1),
plot = F)
eff[i] = diag(marginalEffects(nn.fit, interactions = FALSE)$mean)
out[i] = mean(predict(nn.fit))
}
#X = matrix(runif(100*50, -1, 1), 100, 50)
X = matrix(runif(100, -1, 1), 100, 1)
Y = rnorm(100)
data = data.frame(Y,X)
set.seed(123)
source("C:/Users/Besitzer/Documents/myfirstpackage/R/AME.R")
source("C:/Users/Besitzer/Documents/myfirstpackage/R/dataGenerator.R")
library(cito)
rep = 500
out = rep(NA, rep)
eff = numeric(rep)
for(i in 1:rep){
nn.fit <- dnn(Y~., data = data,
epochs = 1, lr = 0.000000000000001, hidden = c(1),
plot = F)
eff[i] = diag(marginalEffects(nn.fit, interactions = FALSE)$mean)
out[i] = mean(predict(nn.fit))
}
set.seed(123)
source("C:/Users/Besitzer/Documents/myfirstpackage/R/AME.R")
source("C:/Users/Besitzer/Documents/myfirstpackage/R/dataGenerator.R")
library(cito)
rep = 500
out = rep(NA, rep)
eff = numeric(rep)
for(i in 1:rep){
nn.fit <- dnn(Y~., data = data,
epochs = 1, lr = 0.000000000000001, hidden = c(1),
plot = F)
eff[i] = diag(marginalEffects(nn.fit, interactions = FALSE)$mean)
out[i] = mean(predict(nn.fit))
}
install.packages(c("BiocManager", "cpp11", "DEoptimR", "digest", "fs", "gert", "igraph", "lavaan", "magick", "MatrixModels", "openssl", "phytools", "pkgload", "quantreg", "remotes", "rstantools", "rstudioapi", "sass", "sf", "stars", "tinytex", "TMB", "viridis", "xfun"))
set.seed(123)
source("C:/Users/Besitzer/Documents/myfirstpackage/R/AME.R")
source("C:/Users/Besitzer/Documents/myfirstpackage/R/dataGenerator.R")
library(cito)
rep = 500
out = rep(NA, rep)
eff = numeric(rep)
for(i in 1:rep){
nn.fit <- dnn(Y~., data = data,
epochs = 1, lr = 0.000000000000001, hidden = c(1),
plot = F)
eff[i] = diag(marginalEffects(nn.fit, interactions = FALSE)$mean)
out[i] = mean(predict(nn.fit))
}
set.seed(123)
source("C:/Users/Besitzer/Documents/myfirstpackage/R/AME.R")
source("C:/Users/Besitzer/Documents/myfirstpackage/R/dataGenerator.R")
library(cito)
rep = 500
out = rep(NA, rep)
eff = numeric(rep)
for(i in 1:rep){
nn.fit <- dnn(Y~., data = data,
epochs = 1, lr = 0.000000000000001, hidden = c(1),
plot = F)
eff[i] = diag(marginalEffects(nn.fit, interactions = FALSE)$mean)
out[i] = mean(predict(nn.fit))
}
